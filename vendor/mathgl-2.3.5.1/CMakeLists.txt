cmake_minimum_required(VERSION 2.8.12)
if(POLICY CMP0043)
    cmake_policy(SET CMP0043 OLD)
endif()

project( MathGL )

set(MGL_DEP_LIBS)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are:
		None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(MathGL_VERSION_MAJOR 2)
set(MathGL_VERSION_MINOR 3.5)
set(MathGL_SOVERSION 7.4.3)

function(mgl_add_lib mgl_tmp_lib)
       if(${mgl_tmp_lib} MATCHES mgl)
               set(mgllib mgl)
               set(mgllib2 mgl2)
       else(${mgl_tmp_lib} MATCHES mgl)
               set(mgllib mgl-${mgl_tmp_lib})
               set(mgllib2 mgl2-${mgl_tmp_lib})
       endif(${mgl_tmp_lib} MATCHES mgl)
       set(mgl_src_lst ${ARGV})
       list(REMOVE_AT mgl_src_lst 0)
       add_library(${mgllib} SHARED ${mgl_src_lst})
       add_library(${mgllib}-static STATIC ${mgl_src_lst})
       set_target_properties(${mgllib} PROPERTIES SOVERSION ${MathGL_SOVERSION})
       set_target_properties(${mgllib} PROPERTIES DEFINE_SYMBOL "mgl_EXPORTS")
       set_target_properties(${mgllib} PROPERTIES C_VISIBILITY_PRESET hidden)
       set_target_properties(${mgllib} PROPERTIES CXX_VISIBILITY_PRESET hidden)
       set_target_properties(${mgllib} PROPERTIES VISIBILITY_INLINES_HIDDEN 1)
       target_compile_definitions(${mgllib}-static PUBLIC MGL_STATIC_DEFINE)
       if(MSVC)
	   set(mgl_lib_static "-static")
           if(CMAKE_BUILD_TYPE STREQUAL "Debug")
               set(mgl_lib_end "d")
	   else(CMAKE_BUILD_TYPE STREQUAL "Debug")
               set(mgl_lib_end)
           endif(CMAKE_BUILD_TYPE STREQUAL "Debug")
       elseif(MSVC)
	   set(mgl_lib_static)
           set_target_properties(${mgllib} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
	   set_target_properties(${mgllib}-static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
       endif(MSVC)
       if(enable-mgl2)
               set_target_properties(${mgllib} PROPERTIES OUTPUT_NAME "${mgllib2}${mgl_lib_end}")
               set_target_properties(${mgllib}-static PROPERTIES OUTPUT_NAME "${mgllib2}${mgl_lib_static}${mgl_lib_end}")
       else(enable-mgl2)
               set_target_properties(${mgllib} PROPERTIES OUTPUT_NAME "${mgllib}${mgl_lib_end}")
               set_target_properties(${mgllib}-static PROPERTIES OUTPUT_NAME "${mgllib}${mgl_lib_static}${mgl_lib_end}")
       endif(enable-mgl2)

       install(
               TARGETS ${mgllib} ${mgllib}-static
               RUNTIME DESTINATION bin
               ARCHIVE DESTINATION ${MGL_LIB_INSTALL_DIR}
               LIBRARY DESTINATION ${MGL_LIB_INSTALL_DIR}
       )
endfunction(mgl_add_lib mgl_tmp_lib)

MACRO(MGL_DEPENDENT_OPTION option doc default depends1 force1 depends2 force2)
  IF(${option}_ISSET MATCHES "^${option}_ISSET$")
    SET(${option}_AVAILABLE 1)
    IF(${force1})
    FOREACH(d ${depends1})
      STRING(REGEX REPLACE " +" ";" CMAKE_DEPENDENT_OPTION_DEP "${d}")
      IF(${CMAKE_DEPENDENT_OPTION_DEP})
      ELSE(${CMAKE_DEPENDENT_OPTION_DEP})
          SET(${option}_AVAILABLE 0)
          SET(depends1_AVAILABLE 1)
      ENDIF(${CMAKE_DEPENDENT_OPTION_DEP})
    ENDFOREACH(d)
    ENDIF(${force1})
    IF(${force2})
    FOREACH(d ${depends2})
      STRING(REGEX REPLACE " +" ";" CMAKE_DEPENDENT_OPTION_DEP "${d}")
      IF(${CMAKE_DEPENDENT_OPTION_DEP})
      ELSE(${CMAKE_DEPENDENT_OPTION_DEP})
          SET(${option}_AVAILABLE 0)
          SET(depends2_AVAILABLE 1)
      ENDIF(${CMAKE_DEPENDENT_OPTION_DEP})
    ENDFOREACH(d)
    ENDIF(${force2})
    IF(${option}_AVAILABLE)
      OPTION(${option} "${doc}" "${default}")
      SET(${option} "${${option}}" CACHE BOOL "${doc}" FORCE)
    ELSE(${option}_AVAILABLE)
      IF(${option} MATCHES "^${option}$")
      ELSE(${option} MATCHES "^${option}$")
        SET(${option} "${${option}}" CACHE INTERNAL "${doc}")
      ENDIF(${option} MATCHES "^${option}$")
        IF(depends1_AVAILABLE)
          SET(${option} OFF)
        ELSEIF(depends2_AVAILABLE)
          SET(${option} ON)
        ENDIF(depends1_AVAILABLE)
    ENDIF(${option}_AVAILABLE)
  ELSE(${option}_ISSET MATCHES "^${option}_ISSET$")
    SET(${option} "${${option}_ISSET}")
  ENDIF(${option}_ISSET MATCHES "^${option}_ISSET$")
ENDMACRO(MGL_DEPENDENT_OPTION)
include(CMakeDependentOption)

set(MGL_LIB_INSTALL_DIR "lib" CACHE STRING "Set library install directory")
string(TIMESTAMP MGL_NIGHT "%d.%m.%y")

option(enable-double "Enable double precision in MathGL library" ON)
option(enable-mpi "Enable mpi")
option(enable-opengl "Enable OpenGL support" ON)
option(enable-rvalue "Enable move constructor support (need C++11)" OFF)
option(enable-pthread "Enable POSIX threads support" OFF)
option(enable-openmp "Enable OpenMP support" OFF)

if(enable-pthread AND enable-openmp)
	message(SEND_ERROR "You can't enable POSIX threads and OpenMP at the same time!")
endif(enable-pthread AND enable-openmp)

CMAKE_DEPENDENT_OPTION(enable-zlib "Enable zlib support" ON "NOT enable-all" ON)
CMAKE_DEPENDENT_OPTION(enable-png "Enable png support" ON "NOT enable-all" ON)
CMAKE_DEPENDENT_OPTION(enable-jpeg "Enable jpeg support" OFF "NOT enable-all" ON)
CMAKE_DEPENDENT_OPTION(enable-pdf "Enable pdf support" OFF "NOT enable-all" ON)
CMAKE_DEPENDENT_OPTION(enable-gif "Enable gif support" OFF "NOT enable-all" ON)
CMAKE_DEPENDENT_OPTION(enable-glut "Enable glut support" OFF "NOT enable-all-widgets" ON)

# msvc fwprintf print char* for the specifier of "%s" format
if(MSVC AND MSVC_VERSION GREATER 1899)
	SET(CMAKE_CXX_FLAGS "/EHsc -D_CRT_STDIO_ISO_WIDE_SPECIFIERS ${CMAKE_CXX_FLAGS}")
	SET(CMAKE_C_FLAGS "-D_CRT_STDIO_ISO_WIDE_SPECIFIERS ${CMAKE_C_FLAGS}")
endif(MSVC AND MSVC_VERSION GREATER 1899)

include_directories( ${MathGL_SOURCE_DIR}/include ${MathGL_BINARY_DIR}/include)
set(MGL_INCLUDE_PATH "${CMAKE_INSTALL_PREFIX}/include/mgl2")
set(MGL_CGI_PATH "${CMAKE_INSTALL_PREFIX}/share/mathgl" CACHE STRING "Set CGI install directory")
set(MGL_DEF_FONT "STIX" CACHE STRING "Set default font name")

if(NOT WIN32)
#	set(MGL_CGI_PATH "${CMAKE_INSTALL_PREFIX}/share/mathgl")
	set(MGL_DATA_PATH "${CMAKE_INSTALL_PREFIX}/share/mathgl")
	set(MGL_DOC_PATH "${CMAKE_INSTALL_PREFIX}/share/doc/mathgl")
	set(MGL_MAN_PATH "${CMAKE_INSTALL_PREFIX}/share/man")
	set(MGL_INFO_PATH "${CMAKE_INSTALL_PREFIX}/share/info")
	set(MGL_FONT_PATH "${MGL_DATA_PATH}/fonts")
else(NOT WIN32)
	set(MGL_FONT_PATH "${CMAKE_INSTALL_PREFIX}/fonts")
endif(NOT WIN32)

include(CheckFunctionExists)
include(CMakePushCheckState)
include(TestBigEndian)

TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
if(WORDS_BIGENDIAN)
	ADD_DEFINITIONS(-DWORDS_BIGENDIAN)
endif(WORDS_BIGENDIAN)

CHECK_FUNCTION_EXISTS(sin MGL_SIN)
CHECK_FUNCTION_EXISTS(memrchr HAVE_MEMRCHR)
if(NOT MGL_SIN)
	cmake_push_check_state()
	set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} m)
	CHECK_FUNCTION_EXISTS(sin MGL_SIN_M)
	cmake_pop_check_state()
	if(MGL_SIN_M)
		set(M_LIB m)
	elseif(MGL_SIN_M)
		message(SEND_ERROR "Math library not found")
	endif(MGL_SIN_M)
endif(NOT MGL_SIN)
set(MGL_DEP_LIBS ${M_LIB} ${MGL_DEP_LIBS})

if(HAVE_MEMRCHR)
	ADD_DEFINITIONS(-DHAVE_MEMRCHR)
endif(HAVE_MEMRCHR)

include(CheckTypeSize)
check_type_size("long" SIZEOF_LONG)

include(CheckCXXSourceCompiles)
#unset(MGL_HAVE_C99_COMPLEX)
CHECK_CXX_SOURCE_COMPILES(
"#include <complex>
#include <complex.h>
int main(int argc, char *args[])
{std::complex<double> c(2.0, 1.0);
double _Complex i=1.0i;
double _Complex *a = reinterpret_cast<double _Complex *>(&c);
std::complex<double> b(*a);return 0;}" MGL_HAVE_C99_COMPLEX)
if(NOT MGL_HAVE_C99_COMPLEX)
	set(MGL_HAVE_C99_COMPLEX 0)
endif(NOT MGL_HAVE_C99_COMPLEX)

#unset(MGL_HAVE_NAN_INF)
CHECK_CXX_SOURCE_COMPILES(
"#include <math.h>
int main(){double a=NAN, b=INFINITY;return 0;}" MGL_HAVE_NAN_INF)
if(NOT MGL_HAVE_NAN_INF)
	set(MGL_HAVE_NAN_INF 0)
endif(NOT MGL_HAVE_NAN_INF)

#unset(MGL_HAVE_ATTRIBUTE)
CHECK_CXX_SOURCE_COMPILES(
"int __attribute__((pure)) test1() {return 0;}
int __attribute__((const)) test2(int x) {return x*x;}
int main(int argc, char* argv[]) {return 0;}" MGL_HAVE_ATTRIBUTE)
if(NOT MGL_HAVE_ATTRIBUTE)
	set(MGL_HAVE_ATTRIBUTE 0)
endif(NOT MGL_HAVE_ATTRIBUTE)

unset(MGL_HAVE_TYPEOF CACHE)
CHECK_CXX_SOURCE_COMPILES(
"#define mgl_isnum(a)	({typeof (a) _a = (a); _a==_a;})
int main(){bool a=mgl_isnum(1);return 0;}" MGL_HAVE_TYPEOF)
if(NOT MGL_HAVE_TYPEOF)
	set(MGL_HAVE_TYPEOF 0)
endif(NOT MGL_HAVE_TYPEOF)

if(NOT MSVC AND enable-rvalue)
	SET(CMAKE_CXX_FLAGS "-std=gnu++11 ${CMAKE_CXX_FLAGS}")
	unset(MGL_HAVE_RVAL CACHE)
	CHECK_CXX_SOURCE_COMPILES(
	"struct test { test() {} test(test&& a){} };
	int main() { test t;	return 0; }" MGL_HAVE_RVAL)
	if(NOT MGL_HAVE_RVAL)
		message(SEND_ERROR "Couldn't enable rvalue.")
#		set(MGL_HAVE_RVAL 0)
	endif(NOT MGL_HAVE_RVAL)
else(NOT MSVC AND enable-rvalue)
	set(MGL_HAVE_RVAL 0)
endif(NOT MSVC AND enable-rvalue)



if(enable-double)
	set(MGL_USE_DOUBLE 1)
else(enable-double)
	set(MGL_USE_DOUBLE 0)
endif(enable-double)

if(enable-openmp)
	find_package(OpenMP)
	if(OPENMP_FOUND)
		set(MGL_HAVE_OMP 1)
		set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
		set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	else(OPENMP_FOUND)
		message(SEND_ERROR "Couldn't find OpenMP. You can enable POSIX threads instead.")
		set(MGL_HAVE_OMP 0)
	endif(OPENMP_FOUND)
else(enable-openmp)
	set(MGL_HAVE_OMP 0)
endif(enable-openmp)

if(enable-mpi)
	set(MGL_HAVE_MPI 1)
	find_package(MPI REQUIRED)
	set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
	set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
	include_directories(${MPI_INCLUDE_PATH})
else(enable-mpi)
	set(MGL_HAVE_MPI 0)
endif(enable-mpi)


if(enable-pthr-widget OR enable-pthread)
	if(enable-pthread)
		set(MGL_HAVE_PTHREAD 1)
	else(enable-pthread)
		set(MGL_HAVE_PTHREAD 0)
	endif(enable-pthread)
	set(MGL_HAVE_PTHR_WIDGET 1)
	include(FindThreads)
	if(NOT CMAKE_USE_PTHREADS_INIT)
		message(SEND_ERROR "Couldn't find POSIX threads library.")
	endif(NOT CMAKE_USE_PTHREADS_INIT)
	set(MGL_DEP_LIBS ${CMAKE_THREAD_LIBS_INIT} ${MGL_DEP_LIBS})
else(enable-pthr-widget OR enable-pthread)
	set(MGL_HAVE_PTHR_WIDGET 0)
	set(MGL_HAVE_PTHREAD 0)
endif(enable-pthr-widget OR enable-pthread)

set(MGL_HAVE_GSL 0)
set(MGL_HAVE_LTDL 0)
set(MGL_HAVE_HDF4 0)
set(MGL_HAVE_HDF5 0)
set(MGL_HAVE_FLTK 0)


if(enable-jpeg)
	set(MGL_HAVE_JPEG 1)
	include(FindJPEG)
	if(NOT JPEG_FOUND)
		message(SEND_ERROR "Couldn't find JPEG library.")
	endif(NOT JPEG_FOUND)
	set(MGL_DEP_LIBS ${JPEG_LIBRARIES} ${MGL_DEP_LIBS})
	include_directories(${JPEG_INCLUDE_DIR})
else(enable-jpeg)
	set(MGL_HAVE_JPEG 0)
endif(enable-jpeg)


if(enable-zlib)
	set(MGL_HAVE_ZLIB 1)
	include(FindZLIB)
	if(NOT ZLIB_FOUND)
		message(SEND_ERROR "Couldn't find ZLib library.")
	endif(NOT ZLIB_FOUND)
	set(MGL_DEP_LIBS ${ZLIB_LIBRARIES} ${MGL_DEP_LIBS})
	include_directories(${ZLIB_INCLUDE_DIR})
else(enable-zlib)
	set(MGL_HAVE_ZLIB 0)
endif(enable-zlib)

if(enable-png)
	set(MGL_HAVE_PNG 1)
	if(NOT MGL_HAVE_ZLIB)
		message(SEND_ERROR "You have to enable ZLib if you plan to use PNG export.")
	endif(NOT MGL_HAVE_ZLIB)
	include(FindPNG)
	if(NOT PNG_FOUND)
		message(SEND_ERROR "Couldn't find PNG library.")
	endif(NOT PNG_FOUND)
	set(MGL_DEP_LIBS ${PNG_LIBRARIES} ${MGL_DEP_LIBS})
	include_directories(${PNG_INCLUDE_DIR})
else(enable-png)
	set(MGL_HAVE_PNG 0)
endif(enable-png)


if(enable-pdf)
	set(MGL_HAVE_PDF 1)
	if(NOT MGL_HAVE_PNG)
		message(SEND_ERROR "You have to enable PNG if you plan to use PDF export.")
	endif(NOT MGL_HAVE_PNG)
	find_library(HPDF_LIB hpdf)
	if(NOT HPDF_LIB)
		message(SEND_ERROR "Couldn't find libHaru or libhpdf.")
	endif(NOT HPDF_LIB)
	find_path(HPDF_INCLUDE_DIR hpdf_u3d.h)
	if(NOT HPDF_INCLUDE_DIR)
		message(SEND_ERROR "Couldn't find headers of 3d-enabled version of libhpdf.")
	endif(NOT HPDF_INCLUDE_DIR)
	include_directories(${HPDF_INCLUDE_DIR})
	set(MGL_DEP_LIBS ${HPDF_LIB} ${MGL_DEP_LIBS})
else(enable-pdf)
	set(MGL_HAVE_PDF 0)
endif(enable-pdf)

if(enable-gif)
	set(MGL_HAVE_GIF 1)
	include(FindGIF)
	if(NOT GIF_FOUND)
		message(SEND_ERROR "Couldn't find GIF library.")
	endif(NOT GIF_FOUND)
	set(MGL_DEP_LIBS ${GIF_LIBRARIES} ${MGL_DEP_LIBS})
	include_directories(${GIF_INCLUDE_DIR})
else(enable-gif)
	set(MGL_HAVE_GIF 0)
endif(enable-gif)

if(enable-opengl)
	set(MGL_HAVE_OPENGL 1)
	include(FindOpenGL)
	if(NOT OPENGL_FOUND)
		message(SEND_ERROR "Couldn't find OpenGL libraries.")
	endif(NOT OPENGL_FOUND)
	set(MGL_DEP_LIBS ${OPENGL_LIBRARIES} ${MGL_DEP_LIBS})
	include_directories(${OPENGL_INCLUDE_DIR} )
else(enable-opengl)
	set(MGL_HAVE_OPENGL 0)
endif(enable-opengl)

if(enable-glut)
	set(MGL_HAVE_GLUT 1)
	if(NOT MGL_HAVE_OPENGL)
		message(SEND_ERROR "You have to enable OpenGL if you plan to use GLUT.")
	endif(NOT MGL_HAVE_OPENGL)
	include(FindGLUT)
	if(NOT GLUT_FOUND)
		message(SEND_ERROR "Couldn't find GLUT library.")
	endif(NOT GLUT_FOUND)
else(enable-glut)
	set(MGL_HAVE_GLUT 0)
endif(enable-glut)


if(UNIX)
	add_definitions(-DNO_COLOR_ARRAY)
endif(UNIX)

if(WIN32)
	add_definitions(-DWIN32)
endif(WIN32)

add_subdirectory( src )
add_subdirectory( include )


if(WIN32)
	install(FILES ${CMAKE_SOURCE_DIR}/FindMathGL2.cmake DESTINATION ${CMAKE_INSTALL_PREFIX} RENAME mathgl2-config.cmake)
else(WIN32)
	install(FILES ${CMAKE_SOURCE_DIR}/FindMathGL2.cmake DESTINATION ${MGL_LIB_INSTALL_DIR}/cmake/mathgl2/ RENAME mathgl2-config.cmake)
endif(WIN32)
